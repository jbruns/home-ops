services:
  prometheus:
    image: prom/prometheus:v3.2.1
    container_name: prometheus
    user: ${MONITORING_UID}:${MONITORING_GID}
    security_opt:
      - no-new-privileges=true
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--web.config.file=/etc/prometheus/web.yml'
      - '--log.level=error'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=7d'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.external-url=http://prometheus.${DOMAIN}'
    labels:
      # logs collection
      logging: promtail
      logging_jobname: containerlogs
      stackname: monitoring

      traefik.enable: true

      # Listen on http, but redirect all requests to https
      traefik.http.routers.prometheus-http.rule: Host(`prometheus.${DOMAIN}`)
      traefik.http.routers.prometheus-http.entrypoints: http
      traefik.http.routers.prometheus-http.middlewares: redirect-https

      # Direct all https requests to the service, checking with crowdsec first
      traefik.http.routers.prometheus-https.rule: Host(`prometheus.${DOMAIN}`)
      traefik.http.routers.prometheus-https.entrypoints: https
      traefik.http.routers.prometheus-https.tls: true
      traefik.http.routers.prometheus-https.tls.certresolver: ${CERT_RESOLVER}
      traefik.http.routers.prometheus-https.service: prometheus
      traefik.http.routers.prometheus-https.middlewares: crowdsec-bouncer

      traefik.http.services.prometheus.loadbalancer.server.port: 9090

      # network policy
      whalewall.enabled: true
      # prometheus: Communicate with traefik, monitoring data sources.
      whalewall.rules: |
        output:
          # allow communication with metrics exporters
          - network: common_backend
            proto: tcp
            dst_ports:
              - 1024-65535
          # reverse proxy
          - network: common_backend
            container: traefik
          # grafana, alertmanager: data collection
          - network: common_backend
            container: grafana
          - network: common_backend
            container: alertmanager
    logging:
      driver: json-file
      options:
        max-size: 1m
        max-file: 1
        tag: "{{.Name}}"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - type: bind
        source: ./web.yml
        target: /etc/prometheus/web.yml
        read_only: true
        # Stored encrypted in repo
        x-sops: true
      - ./recording-rules.yml:/etc/prometheus/recording-rules.yml:ro
      - ./alerting-rules.yml:/etc/prometheus/alerting-rules.yml:ro

      - prometheus_data:/prometheus
    networks:
      - backend

volumes:
  prometheus_data:
